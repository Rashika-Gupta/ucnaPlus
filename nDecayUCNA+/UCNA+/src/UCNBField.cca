
#include "UCNBField.hh"
#include <iostream>
#include <fstream>
#include <TString.h>
#include "G4SystemOfUnits.hh"
#include <cmath>

	UCNBField::UCNBField() 
	
{
  UCNBField::LoadElectricFieldMap();
  UCNBField::LoadMagneticFieldMap();
}

void UCNBField::LoadElectricFieldMap()
{
  /*
  TString filenameE;
  // Define coordinate arrays
  for (G4int i=0; i<573; i++) {
    zE[i] = ((G4double)i) - 286.;
    //G4cout << z[i] << G4endl;
  }
  for (G4int j=0; j<210; j++) {
    rhoE[j] = ((G4double)j) / 10.;
    //G4cout << rho[j] << G4endl;
  }

  // Basically initialize some values.
  */
}


void UCNBField::LoadMagneticFieldMap()
{
/*
  TString filenameB;

  // Hard coded file path for Nab field map
  filenameB = "/tmp_mnt/home62/grads/chandra1235/Desktop/nab496_03312017/ShowBField_Roger2.dat";
  ifstream fileinB;
  fileinB.open(filenameB.Data());
  //G4cout << "Reading magnetic field map from ... " << filenameB.Data() << G4endl;

  // Define coordinate arrays 
  for (G4int i=0; i<401; i++) {
    zB[i] = -1000. + ((G4double)i)*5.;
    //G4cout << zB[i] << G4endl;
  }
  for (G4int j=0; j<146; j++) {
    rhoB[j] = ((G4double)j)*5.;
    //G4cout << rhoB[j] << G4endl; 
  }

  // Read magnetic field map
  
  G4double ztmp, rhotmp, Bmag, frac;
  if (!fileinB) {
    G4cout << "CANNOT OPEN MAGNETIC FIELD MAP!" << G4endl;
    exit(0);
  }
  else {
    fileinB.ignore(200,'\n');  // Toss out header lines
    fileinB.ignore(200,'\n');
    Bct=0;
    while(fileinB >> tmp1 >> tmp2 >> tmp3 >> tmp4 >> tmp5 >> tmp6){
	zIn[Bct]=tmp1; rFTIn[Bct]=tmp3; rOIn[Bct]=tmp5;		
	zBin[Bct]=tmp2; rFTBin[Bct]=tmp4; rOBin[Bct]=tmp6;		
	Bct++;  // Fill field map variables
    }
    }*/
}

void UCNBField::GetFieldValue(const double point[4], double *Bfield ) const
{
  // These (x,y,z) positions are returned in units of [mm]
  G4double x_mm = point[0];
  G4double y_mm = point[1];
  G4double z_mm = point[2];

  // Convert to units of [m]
  G4double x_cm, y_cm, z_cm;
  G4double x_m = x_mm/1000.;
  G4double y_m = y_mm/1000.;
  G4double z_m = z_mm/1000.;

  // Sinusoidal interpolation of field
  G4double zgrid[6];
  zgrid[0] = -9.0;
  zgrid[1] = -2.2;
  zgrid[2] = -1.5;
  zgrid[3] =  1.5;
  zgrid[4] =  2.2;
  zgrid[5] =  9.0;

  G4double Bzgrid[6];
  Bzgrid[0] = 0.6;
  Bzgrid[1] = 0.6;
  Bzgrid[2] = 1.0;
  Bzgrid[3] = 1.0;
  Bzgrid[4] = 0.6;
  Bzgrid[5] = 0.6;

  int zindexLow = 0;
  for (G4int i=0; i<Bct; i++) {
    if ( (z_m > zIn[i]) && (z_m < zIn[i+1]) ) zindexLow = i;
  }

  //G4cout << z_m << " " << zindexLow << G4endl;

  G4double base = (zBin[zindexLow]);  //(zBin[zindexLow] - zBin[zindexLow+1]) / 2.;
  G4double amp  = (zBin[zindexLow+1] - zBin[zindexLow]);  //(zBin[zindexLow] - zBin[zindexLow+1]) / 2.;
  G4double dz   = zIn[zindexLow+1] - zIn[zindexLow];
  G4double l    = (z_m - zIn[zindexLow])/dz;

  G4double baseFT = (rFTBin[zindexLow]);
  G4double ampFT  = (rFTBin[zindexLow+1] - rFTBin[zindexLow]);
  
  G4double baseO = (rOBin[zindexLow]);
  G4double ampO  = (rOBin[zindexLow+1] - rOBin[zindexLow]);
  G4double rDiff = (rOIn[zindexLow] - rFTIn[zindexLow]);
  G4double rDiff1 = (rOIn[zindexLow+1] - rFTIn[zindexLow+1]);
  G4double rDiff2 = (rOIn[zindexLow+2] - rFTIn[zindexLow+2]);

  G4double Bxint, Byint, Bzint, Brhoint;
  G4double Exint, Eyint, Ezint, Erhoint;

  // Defines field on-axis
  Bzint = base + amp*l;  // Linear interpolation of on-axis Z field
  Brhoint=amp/dz;  // Derive radial component as a function of change B_z

  G4double bSpan1, bSpan2, lSpan, aSpan;

  G4double rSim = sqrt(x_m*x_m + y_m*y_m);
  // For r in the 2nd band of field points, redefine
  if(rSim<=rOIn[zindexLow] && rSim>rFTIn[zindexLow]){  
	bSpan1 = baseFT+ampFT*l;
	bSpan2 = baseO+ampO*l;
	aSpan = (bSpan2 - bSpan1);
	lSpan = rOIn[zindexLow]-rFTIn[zindexLow];
	lSpan = (rSim-rFTIn[zindexLow])/lSpan;
	Bzint = bSpan1 + aSpan*lSpan;
  	rDiff1 = (rFTBin[zindexLow+2] + rFTBin[zindexLow+1]);
  	rDiff2 = (rOBin[zindexLow+2] + rOBin[zindexLow+1]);

  }
  if(rSim<=rFTIn[zindexLow]) {
	bSpan1 = base+amp*l;
	bSpan2 = baseFT+ampFT*l;
	aSpan = (bSpan2-bSpan1);
	lSpan = (rSim)/rFTIn[zindexLow];
	Bzint = bSpan1 + aSpan*lSpan;
  	rDiff1 = (rFTBin[zindexLow+2] + rFTBin[zindexLow+1]);
  	rDiff2 = (zBin[zindexLow+2] + zBin[zindexLow+1]);

  } 

  if(rSim>rOIn[zindexLow]) {
	bSpan1 = 0.;
	bSpan2 = baseO+ampFT*l;
	aSpan = (bSpan1-bSpan2);
	lSpan = (rSim)/rOIn[zindexLow];
	Bzint = bSpan2*rOIn[zindexLow]/rSim;
        

  }
  // deoompose B_r into B_x/B_y with necessary -1/2 factor from deriv.
  Bxint   = -0.5* Brhoint * x_m;
  Byint   = -0.5* Brhoint * y_m;

  // Magnetic field: (x,y,z) -> (0,1,2) components of Bfield[.]
  Bfield[0] = Bxint * tesla;
  Bfield[1] = Byint * tesla;
  Bfield[2] = Bzint * tesla;

  G4double deltaphiNeg =  -5.; // [kV]
  G4double deltazNeg   =  20.; // [cm]

  G4double deltaphiPos = -30.; // [kV]
  G4double deltazPos   =  20.; // [cm]

  Exint = 0.;
  Eyint = 0.;
  Ezint = 0.;

  G4double tiny = 1.0e-9;

  // Leave E_x/E_y=0, but in electrodes put appropriate fields.
  // Note that the field is defined for +z, so a 30./5. kV/cm field 
  // is defined with the more positive electrode at lower Z.
  if ( (z_m > 4.89) && (z_m <= 4.94) ){  Ezint = (30./5.); } // IN CM, DAMMIT 
  else if ( (z_m >= -1.14) && (z_m <= -1.09) ) { Ezint = (-1./5.); } // KV/CM
  else Ezint = 0;

  // Electric field: (x,y,z) -> (3,4,5) components of Bfield[.]
  Bfield[3] = Exint * kilovolt/cm;
  Bfield[4] = Eyint * kilovolt/cm;
  Bfield[5] = Ezint * kilovolt/cm;

  //G4cout << z_m << " " << Ezint << " " << Bfield[2] << " " << Bfield[5] << G4endl;

}
